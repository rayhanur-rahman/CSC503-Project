---


- name: Get individual wikis from controller config
  find:
    paths: "{{ m_local_public }}/wikis/"
    file_type: directory
  register: wiki_dirs
  delegate_to: localhost

# FIXME #805: option to delete existing uploads backups initially (clean slate)

# NOTE: no validation of proper directory setup on pushing-to server. Non-push
# role "backup-uploads" has these tasks to handle directory setup:
# - name: Ensure backups directory exists for environment
# - name: Ensure backups directory exists for each wiki
# - name: Ensure backups uploads directory exists for each wiki

- name: Set remote_server_base_path if set in configuration
  set_fact:
    # Likely path if pushing to a live Meza uploads directory:
    #                        /opt/data-meza/uploads/<wiki_id>/
    remote_server_base_path: "{{ push_backup.uploads.path }}"
  when:
    - push_backup.uploads.path is defined

- name: Set remote_server_base_path if NOT set in configuration
  set_fact:
    # Likely path if pushing to a Meza backups directory:
    #                        /opt/data-meza/backups/<env>/<wiki_id>/uploads/
    remote_server_base_path: "{{ m_backups }}/{{ env }}/<id>/uploads/"
  when:
    - push_backup.uploads.path is not defined

- name: Output value of remote_server_base_path (<id> will be replaced by each wiki_id)
  debug: { var: remote_server_base_path }

- name: "Run role:rsync-push - Copy uploads directory to {{ push_backup.uploads.addr }}"
  include_role:
    name: rsync-push
  vars:
    pushing_from_server: "{{ inventory_hostname }}"
    pushing_from_path: "{{ m_uploads_dir }}/{{ item }}/"
    pushing_to_server: "{{ push_backup.uploads.addr }}"
    # remote_server_base_path + backup_timestamp, but replace <id> with wiki_id (item)
    pushing_to_path: "{{ remote_server_base_path | regex_replace('<id>', item) }}"
    pushing_to_user: "{{ push_backup.remote_user }}"
  with_items: "{{ wiki_dirs.files | map(attribute='path') | map('basename') | list }}"
