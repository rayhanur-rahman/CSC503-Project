---
  - name: "If docker is installed, maybe we are running this playbook on a server where it already ran?"
    shell:
      "rpm -q docker"
    register: docker_installed
    ignore_errors: true

  # If docker is already installed, we should remove it
  - name: "Removing previously installed version of docker"
    yum:
      state: absent
      name:
        - docker-selinux
        - docker-common
        - docker-engine
    when: docker_installed.rc == 0

  # TODO Do we need to add possibility to attach to specific pool here?
  - name: "Enable RHEL Extras repo where docker package lives"
    command:
      subscription-manager repos --enable 'rhel-{{ ansible_distribution_major_version }}-server-extras-rpms'

  - name: "clenup repodata in case we have previous registrations"
    command:
      yum clean all
  - name: "docker package installed"
    yum:
      name: docker-1.10.3-59.el7
      state: present

  # Abrt causing load when something fails and we do not care
  - name: "abrt package not present"
    yum:
      name: abrt
      state: absent

  # We are using killall below and generally this is nice to have
  - name: "psmisc package installed"
    yum:
      name: psmisc
      state: present

  # Configure bridge we are going to use
  # https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s2-networkscripts-interfaces_network-bridge.html
  - name: "We will need bridge utils"
    yum:
      name: bridge-utils
      state: present
  - name: "When nic_private is empty, set it to default 'eth1'"
    set_fact:
      nic_private: eth1
    when: "nic_private is undefined or nic_private is none or nic_private == ''"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_private }}"
      regexp: "^ONBOOT="
      line: "ONBOOT=yes"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_private }}"
      regexp: "^NM_CONTROLLED="
      line: "NM_CONTROLLED=no"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_private }}"
      regexp: "^DEVICE="
      line: "DEVICE={{ nic_private }}"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_private }}"
      regexp: "^BOOTPROTO="
      line: "BOOTPROTO=none"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_private }}"
      regexp: "^TYPE="
      line: "TYPE=Ethernet"
  - lineinfile:
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ nic_private }}"
      regexp: "^BRIDGE="
      line: "BRIDGE=docker0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^ONBOOT="
      line: "ONBOOT=yes"
      create: yes
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^TYPE="
      line: "TYPE=Bridge"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^DELAY="
      line: "DELAY=0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^NM_CONTROLLED="
      line: "NM_CONTROLLED=no"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^DEVICE="
      line: "DEVICE=docker0"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^BOOTPROTO="
      line: "BOOTPROTO=static"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^IPADDR="
      line: "IPADDR={{ ip }}"
  - lineinfile:
      dest: /etc/sysconfig/network-scripts/ifcfg-docker0
      regexp: "^NETMASK="
      line: "NETMASK=255.0.0.0"
  - name: "Kill all dhclients (network service was not restarting)"
    command:
      killall dhclient
    ignore_errors: true
  - name: "Restart network"
    command:
      service network restart

  - name: "Ensure sysctl net.ipv4.ip_forward=1"
    sysctl:
      name: net.ipv4.ip_forward
      value: 1
      state: present
      reload: yes

  # Configure docker networking
  - name: "When docker_host_cidr_range is empty, set it to default '24'"
    set_fact:
      docker_host_cidr_range: 24
    when: "docker_host_cidr_range is undefined or docker_host_cidr_range is none or docker_host_cidr_range == ''"
  - name: "Remove --fixed cidr if any"
    command:
      sed -i "s/ --fixed-cidr=[^ '\"]*//g" /etc/sysconfig/docker
  - name: "If we have static ip specified, add '--fixed-cidr={{ ip }}/{{ docker_host_cidr_range }}' in docker config"
    lineinfile:
      dest: /etc/sysconfig/docker
      regexp: "^OPTIONS=['\"]([^'\"]*)['\"]$"
      line: 'OPTIONS="\1 --fixed-cidr={{ ip }}/{{ docker_host_cidr_range }}"'
      backrefs: yes
    when: "ip is defined"

  # Configure docker storage - cleanup
  - name: "docker service not running"
    service:
      name: docker
      state: stopped
      enabled: yes
  - name: "No docker-pool present"
    shell: |
      lvs --separator ':' "/dev/mapper/{{ docker_host_vg }}" | grep '^\s*docker-pool:' \
        && lvremove --force "/dev/mapper/{{ docker_host_vg }}-docker--pool" || true

  # Cleanup Overlay FS configuration if present
  - name: "Check if we have an Overlay configured"
    stat:
      path: "/dev/{{ docker_host_vg }}/docker"
    register: overlay_present
    check_mode: no
    ignore_errors: True
  - name: "Unmount the partition"
    mount:
      name: "{{ item }}"
      state: unmounted
    with_items:
      - /var/lib/docker
      - "/dev/{{ docker_host_vg }}/docker"
    when: overlay_present.stat.exists == true
  - name: "Cleanup /etc/fstab"
    lineinfile:
      name: /etc/fstab
      regexp: '^/dev/{{ docker_host_vg }}/docker'
      state: absent
    when: overlay_present.stat.exists == true
  - name: "Remove overlay device"
    command:
      lvremove -f "{{ docker_host_vg }}"
    when: overlay_present.stat.exists == true

  - name: "Docker storage related config ready to be recreated"
    shell: |
      rm -rf /var/lib/docker/*
      rm -f /etc/sysconfig/docker-storage

  # Configure docker storage
  - name: "docker-storage-setup configured to use Devicemapper direct LVM"
    lineinfile:
      dest: /etc/sysconfig/docker-storage-setup
      regexp: "^VG="
      line: "VG='{{ docker_host_vg }}'"
    when: "docker_host_storage_driver == 'devicemapper'"

  # Configure docker storage - overlayfs
  - name: "Remove --selinux-enabled from docker config"
    command:
      sed -i '/OPTIONS=/s/--selinux-enabled//' /etc/sysconfig/docker
    when: "docker_host_storage_driver == 'overlay'"
  - name: "Create device which will host OverlayFS"
    command:
      lvcreate --name docker --extents 100%FREE --zero y --yes "{{ docker_host_vg }}"
    when: "docker_host_storage_driver == 'overlay'"
  - name: "Create filesystem which will host OverlayFS"
    command:
      mkfs.xfs "/dev/{{ docker_host_vg }}/docker"
    when: "docker_host_storage_driver == 'overlay'"
  - name: "OverlayFS in /etc/fstab"
    lineinfile:
      dest: /etc/fstab
      line: "/dev/{{ docker_host_vg }}/docker /var/lib/docker xfs defaults 0 0"
    when: "docker_host_storage_driver == 'overlay'"
  - name: "OverlayFS mounted"
    command:
      mount /var/lib/docker
    when: "docker_host_storage_driver == 'overlay'"
  - name: "docker-storage-setup configured to use OverlayFS"
    lineinfile:
      dest: /etc/sysconfig/docker-storage-setup
      create: yes
      line: "STORAGE_DRIVER='overlay'"
    when: "docker_host_storage_driver == 'overlay'"

  # Configure docker storage - generate /etc/sysconfig/docker-storage
  - name: "docker-storage-setup"
    command:
      docker-storage-setup

  # Make sure Docker have sufficent open files limit. Default is:
  #   # grep LimitNOFILE /usr/lib/systemd/system/docker.service
  #   LimitNOFILE=1048576
  # so give it 4 times that. One new systemd container in idle
  # state with sshd consumes 300. System wide maximum is:
  #   # sysctl fs.file-max
  #   fs.file-max = 6516531
  - name: "Docker service directory created"
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory
      owner: root
      group: root
      mode: 0755
  - name: "Deploy limits.conf"
    copy:
      content: |
        [Service]
        LimitNOFILE=unlimited
      dest: /etc/systemd/system/docker.service.d/limits.conf
      owner: root
      group: root
      mode: 0644
  - name: "Service directory have correct SELinux context"
    command:
      restorecon -vR /etc/systemd/system/docker.service.d
  - name: "SystemD reloaded"
    command:
      systemctl daemon-reload

  - name: "docker service restarted to use new settings"
    service:
      name: docker
      state: restarted
      enabled: yes

  # Install and preconfigure Ansible
  - name: "Package ansible installed"
    yum:
      name: ansible
      state: installed
  - name: "Ansible should not check host keys"
    lineinfile:
      dest: /etc/ansible/ansible.cfg
      regexp: '^.*host_key_checking'
      line: 'host_key_checking = False'
      state: present

  # Screen is also very useful
  - name: "Install screen"
    yum:
      name: screen
      state: installed
...
