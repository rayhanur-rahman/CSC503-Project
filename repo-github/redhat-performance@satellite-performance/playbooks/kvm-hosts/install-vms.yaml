---
# To remove all VMs:
# for g in $( virsh list --all --name | grep -v '^$' ); do virsh destroy "$g"; virsh undefine "$g" --remove-all-storage; done
#
# To get MACs of all VMs:
# for g in $( virsh list --all --name | grep -v '^$' ); do mac=$( virsh dumpxml "$g" | grep -B 1 "source bridge='brpublic'" | grep "mac address=" | cut -d "'" -f 2 ); echo $g $mac; done

- hosts: kvm-hosts
  remote_user: root
  gather_facts: no
  vars:
    vm_create_delay: 10
  vars_files:
    - ../../conf/satperf.yaml
    - ../../conf/satperf.local.yaml
  roles:
    ###- ../satellite/roles/common
  tasks:
    - name: "List VMs"
      virt:
        command: list_vms
      register: vms_list
    - debug: var=vms_list
    - name: "Deploy KS files"
      template:
        src: "files/{{ item.ks }}.j2"
        dest: "/root/{{ item.name }}-{{ item.ks }}"
      when: "item.name not in vms_list.list_vms"
      with_items: "{{ vms[inventory_hostname] }}"
    - name: "Install VM"
      shell: |
        set -e
        virt-install \
          --name "{{ item.name }}" \
          --vcpus "{{ item.cpu_count }}" \
          --ram "{{ item.mem_size }}" \
          --disk "{{ item.disk }}" \
          {% if item.nic_1g_bridge is defined and item.nic_1g_mac is defined %}--network bridge="{{ item.nic_1g_bridge }}",mac="{{ item.nic_1g_mac }}"{% else %}--network "{{ item.nic_1g }}"{% endif %} \
          {% if item.nic_10g_bridge is defined and item.nic_10g_mac is defined %}--network bridge="{{ item.nic_10g_bridge }}",mac="{{ item.nic_10g_mac }}"{% else %}--network "{{ item.nic_10g }}"{% endif %} \
          --virt-type kvm \
          --os-type linux \
          --os-variant rhel7 \
          --graphics spice \
          --location "{{ vms_kss_os }}" \
          --initrd-inject "/root/{{ item.name }}-{{ item.ks }}" \
          --extra-args "ks=file:/{{ item.name }}-{{ item.ks }} console=tty0 console=ttyS0,115200 {% if item.extra_kernel_args is defined %}{{ item.extra_kernel_args }}{% endif %}" \
          --noautoconsole
        sleep "{{ vm_create_delay }}"
      when: "item.name not in vms_list.list_vms"
      with_items: "{{ vms[inventory_hostname] }}"

    - name: "Wait for installation to be finished and machines turned off"
    # We will give VM a half hour to finish the install and turn off.
    # My usual number of 30 seconds tries before the machines are installed is around 15.
      virt:
        command: status
        name: "{{ item.name }}"
      register: vminfo
      until: vminfo.status == "shutdown"
      retries: 60
      delay: 30
      with_items: "{{ vms[inventory_hostname] }}"

    - name: "Start the VMs..."
      virt:
        name: "{{ item.name }}"
        state: running
      with_items: "{{ vms[inventory_hostname] }}"

    - name: "...and wait until they are ready"
      wait_for:
        host: "{{ item.ip }}"
        port: 22
        search_regex: OpenSSH
      with_items: "{{ vms[inventory_hostname] }}"
...
