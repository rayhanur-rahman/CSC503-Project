---
# Based on https://github.com/openshift/origin/blob/master/docs/cluster_up_down.md#linux

- name: "Ensure sysctl net.ipv4.ip_forward=1"
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    reload: yes

#### https://github.com/openshift/openshift-docs/issues/10945
###- name: "Ensure file with registry configuration is there"
###  file:
###    path: /etc/containers/
###    state: directory
###    mode: 0755
###- name: "Ensure we have insecure registry configured"
###  ini_file:
###    path: /etc/containers/registries.conf
###    section: registries.insecure
###    option: registries
###    value: "['172.30.0.0/16']"
###    mode: '600'
###  register: insecure_registry
###- name: "Reload systemd"
###  systemd:
###    daemon_reload: yes
###    name: docker
###    state: restarted
###    enabled: yes
###  when: insecure_registry.changed
- name: "Enable inscure registries"
  lineinfile:
    path: /etc/sysconfig/docker
    regexp: '^\s*OPTIONS="(.*)"\s*$'
    line: 'OPTIONS="\1 --insecure-registry 172.30.0.0/16"'
    backrefs: yes
- name: "With old Docker (1.10 we use on docker hosts) I was getting failures"
  yum:
    name: docker
    state: latest
- name: "Make sure docker is running"
  service:
    name: docker
    state: restarted
    enabled: yes

- name: "Determine the Docker bridge network container subnet"
  command:
    docker network inspect -f '{% raw %}{{range .IPAM.Config }}{{ .Subnet }}{{end}}{% endraw %}' bridge
  register: docker_subnet
- name: "Make sure Firewalld is running"
  service:
    name: firewalld
    state: started
    enabled: yes
- name: "Create dockerc zone"
  ## https://github.com/ansible/ansible/pull/42868
  #firewalld:
  #  zone: dockerc
  #  state: present
  #  permanent: true
  command:
    firewall-cmd --permanent --new-zone dockerc
  register: zone_created
  changed_when: "'success' in zone_created.stdout"
  failed_when: "'success' not in zone_created.stdout and 'NAME_CONFLICT' not in zone_created.stderr"
- debug:
    var: zone_created.stdout
- name: "Reload firewalld so new zone is available"
  systemd:
    name: firewalld
    state: reloaded
    enabled: yes
  when: zone_created.changed
- name: "Source docker subnet in the zone"
  firewalld:
    zone: dockerc
    permanent: yes
    immediate: yes
    source: "{{ docker_subnet.stdout }}"
    state: enabled
- name: "Ports in the zone"
  firewalld:
    zone: dockerc
    permanent: yes
    immediate: yes
    port: "{{ item }}"
    state: enabled
  with_items:
    - 8443/tcp
    - 53/udp
    - 8053/udp

- name: "oc cluster up"
  command:
    oc cluster up
  register: oc_cluster_up
- name: "Show output"
  debug:
    var: oc_cluster_up.stdout_lines
...
