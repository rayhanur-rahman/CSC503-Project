---

# function syncConfigs () {

#   if controller.local_config:
#     cp controller.local_config app.each.local_config
#   elif app[1].local_config:
#     # NOTE: if a .git repo, get it so controller has repo
#     cp app[1].local_config controller.local_config
#     cp app[1].local_config app.each.local_config
#   elif local_config.repo:
#     clone repo > controller.local_config
#     clone repo > app.each.local_config
#   else:
#     cp baseline controller
#     cp baseline app.each

# }

# [1] This should only be run the first time (on the first app server) since on
# subsequent passes the controller is gauranteed to have a local config.
- name: Does controller have local config
  stat:
    path: "{{ m_local_public }}"
  register: controller_local_config

# If a git repo is defined use that for config
- name: Get local config repo if set
  become: yes
  become_user: "meza-ansible"
  # Ref #1149 for TMPDIR environment var
  environment:
    TMPDIR: "{{ m_tmp }}"
  git:
    repo: "{{ local_config_repo.repo }}"
    dest: "{{ m_local_public }}"
    version: "{{ local_config_repo.version | default('master') }}"
    force: "{{ local_config_repo.force | default(false) | bool }}"
    umask: "0002"
  when:
    not controller_local_config.stat.exists
    and local_config_repo.repo is defined

# After all that, now check if controller has a local config
# (not sure if I should reuse controller_local_config here)
- name: Does controller have local config
  stat:
    path: "{{ m_local_public }}"
  register: recheck_controller

# At this point, whether a m_local directory exists on the controller or not,
# ensure the directory exists and is configured properly
- name: Ensure m_local_public configured on controller
  file:
    path: "{{ m_local_public }}"
    state: directory
    owner: "{{ m_config_public_owner }}"
    group: "{{ m_config_public_group }}"
    mode: "{{ m_config_public_mode }}"
    recurse: true
  tags:
    - file-perms


# Still no config for controller? This must be a new installation. Copy from
# the baseline.
- name: "Ensure m_local_public/wikis exists"
  file:
    path: "{{ m_local_public }}/wikis"
    state: directory
    owner: "{{ m_config_public_owner }}"
    group: "{{ m_config_public_group }}"
    mode: "{{ m_config_public_mode }}"

- name: Ensure pre/post settings directories exists in config
  file:
    path: "{{ m_local_public }}/{{ item }}"
    state: directory
    owner: "{{ m_config_public_owner }}"
    group: "{{ m_config_public_group }}"
    mode: "{{ m_config_public_mode }}"
  with_items:
    - preLocalSettings.d
    - postLocalSettings.d


- name: "Ensure base files present, do NOT overwrite"
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ m_local_public }}/{{ item }}"
    owner: "{{ m_config_public_owner }}"
    group: "{{ m_config_public_group }}"
    mode: "{{ m_config_public_mode }}"
    force: no
  with_items:
    - MezaLocalExtensions.yml
    - MezaLocalSkins.yml
    - public.yml

- name: "Ensure {{ m_meza }} properly owned"
  file:
    path: "{{ m_meza }}"
    owner: "{{ m_meza_owner }}"
    group: "{{ m_meza_group }}"
    state: directory
    recurse: Yes
  tags:
    - file-perms

- name: "Ensure {{ m_local_secret }} directories properly owned/moded"
  file:
    path: "{{ item }}"
    owner: "{{ m_config_secret_owner }}"
    group: "{{ m_config_secret_group }}"
    mode: "{{ m_config_secret_dir_mode }}"
    state: directory
  tags:
    - file-perms
  with_items:
    - "{{ m_local_secret }}"
    - "{{ m_local_secret }}/{{ env }}"

- name: "Ensure {{ m_local_secret }} files properly owned/moded"
  file:
    path: "{{ item }}"
    owner: "{{ m_config_secret_owner }}"
    group: "{{ m_config_secret_group }}"
    mode: "{{ m_config_secret_file_mode }}"
    state: file
  tags:
    - file-perms
  with_items:
    - "{{ m_local_secret }}/{{ env }}/secret.yml"
    - "{{ m_local_secret }}/{{ env }}/hosts"
