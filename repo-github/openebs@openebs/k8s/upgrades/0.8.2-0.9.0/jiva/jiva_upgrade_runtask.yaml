# Sample Runtask for upgrading a jiva volume

# CASTemplate jiva-volume-update-0.8.2-0.9.0 is
# used to upgrade a jiva volume
apiVersion: openebs.io/v1alpha1
kind: CASTemplate
metadata:
  name: jiva-volume-update-0.8.2-0.9.0
spec:
  defaultConfig:
  # Base version is the version from which upgrade can happen.
  # This CAS template is does not support  upgrade of OpenEBS version
  # whose version is anything other that specified base version
  # Using this CAS templates, once can upgrade from OpenEBS version
  # 0.8.2 to 0.9.0 only.
  - name: baseVersion
    value: "0.8.2"
  - name: targetVersion
    value: "0.9.0"
  - name: successStatus
    value: "Success"
  - name: failStatus
    value: "Fail"
  run:
    tasks:
      # This runatask will patch the upgraderesults cr with the pv detail which
      # is undergoing upgrade
      - upgrade-jiva-volume-0.8.2-0.9.0-patch-upgrade-results

      # This runtask will get the volume details of given pv
      - upgrade-jiva-volume-0.8.2-0.9.0-get-volume-details

      # This runtask will get the related StorageClass details for given PV
      - upgrade-jiva-volume-0.8.2-0.9.0-get-sc-res-version

      # This runtask will get the details of jiva target deployment and verify
      # its current version is in expected base version
      - upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-deployment

      # This runtask will get the details of jiva replica deployment and verify
      # its current version is in expected base version
      - upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-deployment

      # This runtask will check the status of target pod
      - upgrade-jiva-volume-0.8.2-0.9.0-pre-check-ctrl-pod-phase

      # This runtask will check the status of target pod
      - upgrade-jiva-volume-0.8.2-0.9.0-pre-check-replica-pod-phase

      # This runtask will get the details of jiva controller (aka target)
      # and verify its current version is in expected base version
      - upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-svc

      # This runtask will list all the replicaset of the jiva
      # target deployment
      - upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-old-rs

      # This runtask will list all the replicaset of the jiva
      # replica deployment
      - upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-old-rs

      # This runtask will patch the jiva replica deployment containers with the
      # target version and other required things for upgrade.
      - upgrade-jiva-volume-0.8.2-0.9.0-patch-rep-deployment-latest-version

      # This runtask will verify that the jiva replica deployment containers after
      # the patch has been rolled out successfully.
      - upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-status-latest-version

      # This runtask will verify that the jiva replica deployment containers
      # that are running successfully has the appropriate target version.
      - upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-image

      # This runtask will delete the stale jiva replica deployment replicaset
      - upgrade-jiva-volume-0.8.2-0.9.0-delete-old-rep-rs

      # This runtask will patch the jiva target deployment containers with the
      # target version and other required things for upgrade.
      - upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-deployment-latest-version

      # This runtask will verify that the jiva target deployment containers after
      # the patch has been rolled out successfully.
      - upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-status-latest-version

      # This runtask will verify that the jiva target deployment containers
      # that are running successfully has the appropriate target version.
      - upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-image

      # This runtask will patch the jiva target service
      # with the version label of target version.
      - upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-svc

      # This runtask will check that the version labels has been
      # successfully updated for jiva target service.
      - upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc

      # This runtask will delete the stale jiva target deployment replicaset
      - upgrade-jiva-volume-0.8.2-0.9.0-delete-old-ctrl-rs

      # This runtask will list the snapshots related to this volume
      - upgrade-jiva-volume-0.8.2-0.9.0-list-volumesnapshot

      # This runtask will patched the snapshotdata with capacity
      - upgrade-jiva-volume-0.8.2-0.9.0-patch-volumesnapshotdatadata

      # This runtask will post check the patched snapshotdata
      - upgrade-jiva-volume-0.8.2-0.9.0-post-check-volumesnapshotdata
  taskNamespace: default
---
## This will patch the upgrade result CR
# with basic details such as name, namespace and kind
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-upgrade-results
  namespace: default
spec:
  meta: |
    id: patchResult
    apiVersion: openebs.io/v1alpha1
    kind: UpgradeResult
    action: patch
    objectName: {{ .UpgradeItem.upgradeResultName }}
    runNamespace: {{ .UpgradeItem.upgradeResultNamespace }}
  task: |-
    type: merge
    pspec: |-
      status:
        resource:
          name: {{ .upgradeItem.name }}
          namespace: {{ .upgradeItem.namespace }}
          kind: {{ .upgradeItem.kind }}
  post: |
    {{- $message := printf "patched UpgradeResult {%s} with name and namespace of the resource to be upgraded" .UpgradeItem.upgradeResultName -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-patch-upgrade-results" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-volume-details
  namespace: default
spec:
  meta: |
    id: getVolDetails
    apiVersion: v1
    kind: PersistentVolume
    action: get
    objectName: {{ .UpgradeItem.name }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- jsonpath .JsonResult "{.metadata.annotations.openebs\\.io/cas-type}" | trim | saveAs "getVolDetails.volCASType" .TaskResult | noop -}}
    {{- .TaskResult.getVolDetails.volCASType | notFoundErr "volume CAS type not found" | saveIf "getVolDetails.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.spec.storageClassName}" | trim | saveAs "getVolDetails.scName" .TaskResult | noop -}}
    {{- .TaskResult.getVolDetails.scName | notFoundErr "sc name not found for given volume" | saveIf "getVolDetails.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.spec.claimRef.namespace}" | trim | saveAs "getVolDetails.pvcNamespace" .TaskResult | noop -}}
    {{- .TaskResult.getVolDetails.pvcNamespace | notFoundErr "pvc namespace not found for given volume" | saveIf "getVolDetails.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.spec.claimRef.name}" | trim | saveAs "getVolDetails.pvcName" .TaskResult | noop -}}
    {{- .TaskResult.getVolDetails.pvcName | notFoundErr "pvc name not found for given volume" | saveIf "getVolDetails.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.spec.capacity.storage}" | trim | saveAs "getVolDetails.pvCapacity" .TaskResult | noop -}}
    {{- .TaskResult.getVolDetails.pvCapacity | notFoundErr "pv capacity not for given volume" | saveIf "getVolDetails.notFoundErr" .TaskResult | noop -}}

    {{- $message := printf "details of volume {%s}: volCASType: {%s}, storageClassName: {%s}, pvcName: {%s}, pvcNamespace: {%s}" .UpgradeItem.name .TaskResult.getVolDetails.volCASType .TaskResult.getVolDetails.scName .TaskResult.getVolDetails.pvcName .TaskResult.getVolDetails.pvcNamespace -}}
    {{- $status :=.Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-volume-details" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-sc-res-version
  namespace: default
spec:
  meta: |
    id: getSCDetails
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    action: get
    objectName: {{ .TaskResult.getVolDetails.scName }}
  post: |
    {{- jsonpath .JsonResult "{.metadata.resourceVersion}" | trim | saveAs "getSCDetails.scResVersion" .TaskResult | noop -}}
    {{- .TaskResult.getSCDetails.scResVersion | notFoundErr "sc resource version not found" | saveIf "getSCDetails.notFoundErr" .TaskResult | noop -}}

    {{- $message := printf "resource version for StorageClass {%s}: {%s}" .TaskResult.getVolDetails.scName .TaskResult.getSCDetails.scResVersion -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-sc-res-version" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-deployment
  namespace: default
spec:
  meta: |
    id: listTargetDeployment
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/controller=jiva-controller
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listTargetDeployment.deploymentName" .TaskResult | noop -}}
    {{- .TaskResult.listTargetDeployment.deploymentName | notFoundErr "volume target deployment not found" | saveIf "listTargetDeployment.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.items[*].metadata.labels.openebs\\.io/version}" | trim | saveAs "listTargetDeployment.version" .TaskResult | noop -}}
    {{- .TaskResult.listTargetDeployment.version | notFoundErr "unknown openebs version" | saveIf "listTargetDeployment.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.items[*].spec.replicas}" | trim | saveAs "listTargetDeployment.replicaCount" .TaskResult | noop -}}
    {{- .TaskResult.listTargetDeployment.replicaCount | notFoundErr "replicas not found for jiva controller deployment" | saveIf "listTargetDeployment.notFoundErr" .TaskResult | noop -}}

    {{- $message := "" -}}
    {{- $status := "" -}}

    {{- $isVersionBase := eq .Config.baseVersion.value .TaskResult.listTargetDeployment.version -}}
    {{- $isVersionTarget := eq .Config.targetVersion.value .TaskResult.listTargetDeployment.version -}}
    {{- $isUpgradeContinue := or $isVersionBase $isVersionTarget -}}

    {{- if $isUpgradeContinue }}
    {{- $message = printf "target deployment: {%s} is in expected version" .TaskResult.listTargetDeployment.deploymentName -}}
    {{- $status = .Config.successStatus.value -}}
    {{- else }}
    {{- $message = printf "target deployment: {%s} is not in expected version expected: {%s} but got {%s}" .TaskResult.listTargetDeployment.deploymentName .Config.baseVersion.value .TaskResult.listTargetDeployment.version -}}
    {{- not $isUpgradeContinue | verifyErr $message | saveAs "listTargetDeployment.verifyErr" .TaskResult | noop -}}
    {{- $status = .Config.failStatus.value -}}
    {{- end }}

    {{- print $isVersionBase | toString | saveAs "listTargetDeployment.shouldPatchCtrlDeployment" .TaskResult -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-deployment" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-deployment
  namespace: default
spec:
  meta: |
    id: listReplicaDeployment
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/replica=jiva-replica
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listReplicaDeployment.deploymentName" .TaskResult | noop -}}
    {{- .TaskResult.listReplicaDeployment.deploymentName | notFoundErr "replica deployment not found" | saveIf "listReplicaDeployment.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.items[*].metadata.labels.openebs\\.io/version}" | trim | saveAs "listReplicaDeployment.version" .TaskResult | noop -}}
    {{- .TaskResult.listTargetDeployment.version | notFoundErr "unknown openebs version" | saveIf "listReplicaDeployment.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.items[*].spec.replicas}" | trim | saveAs "listReplicaDeployment.replicaCount" .TaskResult | noop -}}
    {{- .TaskResult.listReplicaDeployment.replicaCount | notFoundErr "replicas not found for jiva replica deployment" | saveIf "listReplicaDeployment.notFoundErr" .TaskResult | noop -}}

    {{- $message := "" -}}
    {{- $status := "" -}}

    {{- $isVersionBase := eq .Config.baseVersion.value .TaskResult.listReplicaDeployment.version -}}
    {{- $isVersionTarget := eq .Config.targetVersion.value .TaskResult.listReplicaDeployment.version -}}
    {{- $isUpgradeContinue := or $isVersionBase $isVersionTarget -}}

    {{- if $isUpgradeContinue }}
    {{- $message = printf "replica deployment: {%s} is in expected version" .TaskResult.listReplicaDeployment.deploymentName -}}
    {{- $status = .Config.successStatus.value -}}
    {{- else }}
    {{- $message = printf "replica deployment: {%s} is not in expected version expected: {%s} but got {%s}" .TaskResult.listReplicaDeployment.deploymentName .Config.baseVersion.value .TaskResult.listReplicaDeployment.version -}}
    {{- not $isUpgradeContinue | verifyErr $message | saveAs "listReplicaDeployment.verifyErr" .TaskResult | noop -}}
    {{- $status = .Config.failStatus.value -}}
    {{- end }}

    {{- print $isVersionBase | saveAs "listReplicaDeployment.shouldPatchRepDeployment" .TaskResult | noop -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-deployment" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-pre-check-ctrl-pod-phase
  namespace: default
spec:
  meta: |
    id: listCtrlPods
    runNamespace: {{ .UpgradeItem.namespace }}
    apiVersion: v1
    kind: Pod
    action: list
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/controller=jiva-controller
  post: |
    {{- $CustomJsonPath := printf "{.items[?(@.status.phase=='Running')].metadata.name}" -}}
    {{- $ErrMsg := printf "No running controller pods found for volume: {%s}" .UpgradeItem.name -}}

    {{- jsonpath .JsonResult $CustomJsonPath | trim | saveAs "listCtrlPods.podName" .TaskResult | noop -}}
    {{- .TaskResult.listCtrlPods.podName | notFoundErr $ErrMsg | saveIf "listCtrlPods.notFoundErr" .TaskResult | noop -}}

    {{- .TaskResult.listCtrlPods.podName | default "" | splitList " " | len | saveAs "listCtrlPods.actualRunningPodCount" .TaskResult -}}

    {{- $expectedPodCount := .TaskResult.listTargetDeployment.replicaCount | int -}}
    {{- $msg := printf "expected %v no of running replica pod(s), found only %v replica pod(s)" $expectedPodCount .TaskResult.listCtrlPods.actualRunningPodCount -}}
    {{- .TaskResult.listCtrlPods.nodeNames | default "" | splitList " " | isLen $expectedPodCount | not | verifyErr $msg | saveIf "listCtrlPods.verifyErr" .TaskResult | noop -}}

    {{- $message := printf "jiva controller pods are in running phase for volume: {%s}" .UpgradeItem.name -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-pre-check-ctrl-pod-phase" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-pre-check-replica-pod-phase
  namespace: default
spec:
  meta: |
    id: listReplicaPods
    runNamespace: {{ .UpgradeItem.namespace }}
    apiVersion: v1
    kind: Pod
    action: list
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/replica=jiva-replica
  post: |
    {{- $CustomJsonPath := printf "{.items[?(@.status.phase=='Running')].spec.nodeName}" -}}
    {{- $ErrMsg := printf "No running replica pods found for volume: {%s}" .UpgradeItem.name -}}

    {{- jsonpath .JsonResult $CustomJsonPath | trim | saveAs "listReplicaPods.nodeNames" .TaskResult | noop -}}
    {{- .TaskResult.listReplicaPods.nodeNames | notFoundErr $ErrMsg | saveIf "listReplicaPods.notFoundErr" .TaskResult | noop -}}

    {{- .TaskResult.listReplicaPods.nodeNames | default "" | splitList " " | len | saveAs "listReplicaPods.actualRunningPodCount" .TaskResult -}}

    {{- $expectedPodCount := .TaskResult.listReplicaDeployment.replicaCount | int -}}
    {{- $msg := printf "expected %v no of running replica pod(s), found only %v replica pod(s)" $expectedPodCount .TaskResult.listReplicaPods.actualRunningPodCount -}}
    {{- .TaskResult.listReplicaPods.nodeNames | default "" | splitList " " | isLen $expectedPodCount | not | verifyErr $msg | saveIf "listReplicaPods.verifyErr" .TaskResult | noop -}}

    {{- $message := printf "jiva replica pods are in running phase and nodesNames for volume: {%s} are {%v}" .UpgradeItem.name .TaskResult.listReplicaPods.nodeNames -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-pre-check-replica-pod-phase" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-svc
  namespace: default
spec:
  meta: |
    id: listTargetService
    apiVersion: v1
    kind: Service
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/controller-service=jiva-controller-svc
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listTargetService.items" .TaskResult | noop -}}
    {{- .TaskResult.listTargetService.items | notFoundErr "volume target service not found" | saveIf "listTargetService.notFoundErr" .TaskResult | noop -}}

    {{- jsonpath .JsonResult "{.items[*].metadata.labels.openebs\\.io/version}" | trim | saveAs "listTargetService.version" .TaskResult | noop -}}
    {{- .TaskResult.listTargetDeployment.version | notFoundErr "unknown openebs version" | saveIf "listTargetService.notFoundErr" .TaskResult | noop -}}

    {{- $message := "" -}}
    {{- $status := "" -}}

    {{- $isVersionBase := eq .Config.baseVersion.value .TaskResult.listTargetService.version -}}
    {{- $isVersionTarget := eq .Config.targetVersion.value .TaskResult.listTargetService.version -}}
    {{- $isUpgradeContinue := or $isVersionBase $isVersionTarget -}}

    {{- if $isUpgradeContinue }}
    {{- $message = printf "target service: {%s} is in expected version" .TaskResult.listTargetService.items -}}
    {{- $status = .Config.successStatus.value -}}
    {{- else }}
    {{- $message = printf "target service: {%s} is not in expected version expected: {%s} but got {%s}" .TaskResult.listTargetService.items .Config.baseVersion.value .TaskResult.listTargetService.version -}}
    {{- not $isUpgradeContinue | verifyErr $message | saveAs "listTargetService.verifyErr" .TaskResult | noop -}}
    {{- $status = .Config.failStatus.value -}}
    {{- end }}

    {{- print $isVersionBase | saveAs "listTargetService.shouldPatchCtrlSVC" .TaskResult | noop -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-svc" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-old-rs
  namespace: default
spec:
  meta: |
    id: listTargetOldrs
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelselector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/controller=jiva-controller
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listTargetOldrs.items" .TaskResult | noop -}}
    {{- .TaskResult.listTargetOldrs.items | notFoundErr "target deployment replicasets were not found" | saveIf "listTargetOldrs.notFoundErr" .TaskResult | noop -}}

    {{- $message := printf "replicaset to be deleted after patching target deployment {%s} is : {%s}" .TaskResult.listTargetDeployment.deploymentName .TaskResult.listTargetOldrs.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-old-rs" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-old-rs
  namespace: default
spec:
  meta: |
    id: listOldReplicars
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelselector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/replica=jiva-replica
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listOldReplicars.items" .TaskResult | noop -}}
    {{- .TaskResult.listOldReplicars.items | notFoundErr "replica deployment replicasets were not found" | saveIf "listreplicars.notFoundErr" .TaskResult | noop -}}

    {{- $message := printf "replicasets to be deleted after patching replica deployment: {%s} is : {%s}" .TaskResult.listReplicaDeployment.deploymentName .TaskResult.listOldReplicars.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-old-rs" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-deployment-latest-version
  namespace: default
spec:
  meta: |
    id: patchCtrlDeploymentLatestVersion
    apiVersion: extensions/v1beta1
    kind: Deployment
    runNamespace: {{ .UpgradeItem.namespace }}
    action: patch
    objectName: {{ .TaskResult.listTargetDeployment.deploymentName }}
    disable: {{ ne .TaskResult.listTargetDeployment.shouldPatchCtrlDeployment "true" }}
  task: |-
    type: strategic
    pspec: |-
      metadata:
        annotations:
          openebs.io/storage-class-ref: "name: {{ .TaskResult.getVolDetails.scName }}\nresourceVersion: {{ .TaskResult.getSCDetails.scResVersion }}\n"
        labels:
          openebs.io/version: {{ .Config.targetVersion.value }}
      spec:
        template:
          metadata:
            annotations:
              openebs.io/storage-class-ref: "name: {{ .TaskResult.getVolDetails.scName }}\nresourceVersion: {{ .TaskResult.getSCDetails.scResVersion }}\n"
            labels:
              openebs.io/version: {{ .Config.targetVersion.value }}
          spec:
            containers:
              - name: {{ .UpgradeItem.name }}-ctrl-con
                image: quay.io/openebs/jiva:{{ .Config.targetVersion.value}}
              - name: maya-volume-exporter
                image: quay.io/openebs/m-exporter:{{ .Config.targetVersion.value}}
  post: |
    {{- $message := printf "controller deployment: {%s} patched with latest images version: {%s}" .TaskResult.listTargetDeployment.deploymentName .Config.targetVersion.value -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-deployment-latest-version" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}

---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-status-latest-version
  namespace: default
spec:
  meta: |
    id: postCheckCtrlDeploymentStatusLatestVersion
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: rolloutstatus
    objectName: {{ .TaskResult.listTargetDeployment.deploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
    retry: "20,20s"
  post: |
    {{- $rolledOut := jsonpath .JsonResult "{.isRolledout}" | trim | saveAs "postCheckCtrlDeploymentStatusLatestVersion.rolledOutStatus" .TaskResult -}}
    {{- $rolloutMessage := jsonpath .JsonResult "{.message}" | trim | saveAs "postCheckCtrlDeploymentStatusLatestVersion.msg" .TaskResult -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-status-latest-version" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}

    {{- $status := "" -}}
    {{- $message := "" -}}

    {{- if eq $rolledOut "true" }}
    {{- $status = .Config.successStatus.value -}}
    {{- $message = printf "target deployment: {%s} rollout status: success" .TaskResult.listTargetDeployment.deploymentName -}}
    {{- else }}
    {{- $status = .Config.failStatus.value -}}
    {{- $message = printf "target deployment: {%s} rollout status: failed" .TaskResult.listTargetDeployment.deploymentName -}}
    {{- "waiting for target deployment rollout" | saveAs "postCheckCtrlDeploymentStatusLatestVersion.verifyErr" .TaskResult | noop -}}
    {{- end }}

    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-image
  namespace: default
spec:
  meta: |
    id: postCheckCtrlDeploymentImageLatestVersion
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: get
    objectName: {{ .TaskResult.listTargetDeployment.deploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- $passed := "true" -}}

    {{- $CustomJsonPath := printf "{.spec.template.spec.containers[?(@.name=='%s-ctrl-con')].image}" .UpgradeItem.name -}}
    {{- $jivaCtrlImage := jsonpath .JsonResult $CustomJsonPath | trim -}}
    {{- $mayaVolExporterImage := jsonpath .JsonResult "{.spec.template.spec.containers[?(@.name=='maya-volume-exporter')].image}" | trim -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-image" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- $status := "" -}}
    {{- $message := "" -}}

    {{- if contains .Config.targetVersion.value $jivaCtrlImage }}
    {{- else }}
    {{- $passed = "false" -}}
    {{- "failed to patch jiva-controller image for controller deployment" | saveAs "postCheckctrlDeploymentImagePatch.verifyErr" .TaskResult | noop -}}
    {{- end }}
    {{- if contains .Config.targetVersion.value $mayaVolExporterImage }}
    {{- else }}
    {{- $passed = "false" -}}
    {{- "failed to patch maya-volume exporter image for controller deployment" | saveAs "postCheckctrlDeploymentImagePatch.verifyErr" .TaskResult | noop -}}
    {{- end }}

    {{- if eq $passed "true" -}}
    {{- $status = .Config.successStatus.value -}}
    {{- $message = printf "patched controller deployment: {%s} with latest images version: {%s}" .TaskResult.listTargetDeployment.deploymentName .Config.targetVersion.value -}}
    {{- else -}}
    {{- $status = .Config.failStatus.value -}}
    {{- $message = printf "failed to patch controller deployment: {%s} with latest images version: {%s}" .TaskResult.listTargetDeployment.deploymentName .Config.targetVersion.value -}}
    {{- end }}

    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-rep-deployment-latest-version
  namespace: default
spec:
  meta: |
    id: patchReplicaDeploymentLatestVersion
    apiVersion: extensions/v1beta1
    kind: Deployment
    runNamespace: {{ .UpgradeItem.namespace }}
    action: patch
    objectName: {{ .TaskResult.listReplicaDeployment.deploymentName }}
    disable: {{ ne .TaskResult.listReplicaDeployment.shouldPatchRepDeployment "true" }}
  task: |-
    {{- $nodeNames := .TaskResult.listReplicaPods.nodeNames -}}
    type: strategic
    pspec: |-
      metadata:
        annotations:
          openebs.io/storage-class-ref: "name: {{ .TaskResult.getVolDetails.scName }}\nresourceVersion: {{ .TaskResult.getSCDetails.scResVersion }}\n"
        labels:
          openebs.io/version: {{ .Config.targetVersion.value }}
      spec:
        template:
          metadata:
            annotations:
              openebs.io/storage-class-ref: "name: {{ .TaskResult.getVolDetails.scName }}\nresourceVersion: {{ .TaskResult.getSCDetails.scResVersion }}\n"
            labels:
              openebs.io/version: {{ .Config.targetVersion.value }}
          spec:
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - key: kubernetes.io/hostname
                      operator: In
                      values:
                      {{- if ne $nodeNames "" }}
                      {{- $nodeNamesMap := $nodeNames | split " " }}
                      {{- range $k, $v := $nodeNamesMap }}
                      - {{ $v }}
                      {{- end }}
                      {{- end }}
            containers:
              - name: {{ .UpgradeItem.name }}-rep-con
                image: quay.io/openebs/jiva:{{ .Config.targetVersion.value}}
  post: |
    {{- $message := printf "replica deployment: {%s} patched with latest images version: {%s}" .TaskResult.listReplicaDeployment.deploymentName .Config.targetVersion.value -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-patch-rep-deployment-latest-version" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-status-latest-version
  namespace: default
spec:
  meta: |
    id: postCheckReplicaDeploymentStatusLatestVersion
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: rolloutstatus
    objectName: {{ .TaskResult.listReplicaDeployment.deploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
    retry: "20,20s"
  post: |
    {{- $rolledOut := jsonpath .JsonResult "{.isRolledout}" | trim | saveAs "postCheckReplicaDeploymentStatusLatestVersion.rolledOutStatus" .TaskResult -}}
    {{- $rolloutMessage := jsonpath .JsonResult "{.message}" | trim | saveAs "postCheckReplicaDeploymentStatusLatestVersion.msg" .TaskResult -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-status-latest-version" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- $status := "" -}}
    {{- $message := "" -}}

    {{- if eq $rolledOut "true" }}
    {{- $status = .Config.successStatus.value -}}
    {{- $message = printf "replica deployment: {%s} rollout status: success" .TaskResult.listReplicaDeployment.deploymentName -}}
    {{- else }}
    {{- $status = .Config.failStatus.value -}}
    {{- $message = printf "replica deployment: {%s} rollout status: failed" .TaskResult.listReplicaDeployment.deploymentName -}}
    {{- "waiting for replica deployment rollout" | saveAs "postCheckReplicaDeploymentStatusLatestVersion.verifyErr" .TaskResult | noop -}}
    {{- end }}

    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-image
  namespace: default
spec:
  meta: |
    id: postCheckReplicaDeploymentImageLatestVersion
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: get
    objectName: {{ .TaskResult.listReplicaDeployment.deploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- $passed := "true" -}}

    {{- $CustomJsonPath := printf "{.spec.template.spec.containers[?(@.name=='%s-rep-con')].image}" .UpgradeItem.name -}}
    {{- $jivaRepImage := jsonpath .JsonResult $CustomJsonPath | trim -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-image" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- $status := "" -}}
    {{- $message := "" -}}

    {{- if contains .Config.targetVersion.value $jivaRepImage }}
    {{- else }}
    {{- $passed = "false" -}}
    {{- "failed to patch jiva-replica image" | saveAs "postCheckRepDeploymentImagePatch.verifyErr" .TaskResult | noop -}}
    {{- end }}

    {{- if eq $passed "true" -}}
    {{- $status = .Config.successStatus.value -}}
    {{- $message = printf "patched replica deployment: {%s} with latest images version: {%s}" .TaskResult.listReplicaDeployment.deploymentName .Config.targetVersion.value -}}
    {{- else -}}
    {{- $status = .Config.failStatus.value -}}
    {{- $message = printf "patched replica deployment: {%s} with latest images version: {%s}" .TaskResult.listReplicaDeployment.deploymentName .Config.targetVersion.value -}}
    {{- end }}

    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-svc
  namespace: default
spec:
  meta: |
    id: patchCtrlSVC
    apiVersion: v1
    kind: Service
    action: patch
    objectName: {{ .TaskResult.listTargetService.items }}
    runNamespace: {{ .UpgradeItem.namespace }}
    disable: {{ ne .TaskResult.listTargetService.shouldPatchCtrlSVC "true" }}
  task: |-
    type: merge
    pspec: |-
      metadata:
        annotations:
          openebs.io/storage-class-ref: "name: {{ .TaskResult.getVolDetails.scName }}\nresourceVersion: {{ .TaskResult.getSCDetails.scResVersion }}\n"
        labels:
          openebs.io/version: {{ .Config.targetVersion.value }}
  post: |
    {{- $message := printf "patched controller service: {%s} with required labels and annotations" .TaskResult.listTargetService.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-svc" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc
  namespace: default
spec:
  meta: |
    id: postCheckCtrlSVC
    apiVersion: v1
    kind: Service
    action: get
    objectName: {{ .TaskResult.listTargetService.items }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- jsonpath .JsonResult "{.metadata.labels.openebs\\.io/version}" | trim | saveAs "postCheckCtrlSVC.version" .TaskResult | noop -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- $status := "" -}}
    {{- $message := "" -}}

    {{- if eq .Config.targetVersion.value .TaskResult.postCheckCtrlSVC.version -}}
    {{- $status = .Config.successStatus.value -}}
    {{- $message = printf "patched version label on controller service: {%s}" .TaskResult.listTargetService.items -}}
    {{- else -}}
    {{- $status = .Config.failStatus.value -}}
    {{- $message = "failed to patch version label on controller service: {%s}" .TaskResult.listTargetService.items -}}
    {{- "labels not patched on jiva controller service" | saveAs "postCheckCtrlSVC.verifyErr" .TaskResult | noop -}}
    {{- end }}

    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-delete-old-ctrl-rs
  namespace: default
spec:
  meta: |
    {{- $rslist := .TaskResult.listTargetOldrs.items | default "" | splitList " " -}}
    id: deleteCtrlReplicaSet
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    runNamespace: {{ .UpgradeItem.namespace }}
    action: delete
    disable: {{ ne .TaskResult.listTargetDeployment.shouldPatchCtrlDeployment "true" }}
    repeatWith:
      metas:
      {{- range $k, $rs := $rslist }}
      - objectName: {{ $rs }}
      {{- end }}
  post: |
    {{- $message := printf "deleted older controller replicasets: {%s}" .TaskResult.listTargetOldrs.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-delete-old-ctrl-rs" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-delete-old-rep-rs
  namespace: default
spec:
  meta: |
    {{- $rslist := .TaskResult.listOldReplicars.items | default "" | splitList " " -}}
    id: deleteReplicaReplicaSet
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    runNamespace: {{ .UpgradeItem.namespace }}
    action: delete
    disable: {{ ne .TaskResult.listReplicaDeployment.shouldPatchRepDeployment "true" }}
    repeatWith:
      metas:
      {{- range $k, $rs := $rslist }}
      - objectName: {{ $rs }}
      {{- end }}
  post: |
    {{ $retries := 0 -}}
    {{- $message := printf "deleted older replica replicasets: {%s}" .TaskResult.listTargetOldrs.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-delete-old-rep-rs" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-list-volumesnapshot
  namespace: default
spec:
  meta: |
    id: listVolumeSnapshotDetails
    apiVersion: v1
    kind: VolumeSnapshot
    action: list
    options: |-
      labelSelector: SnapshotMetadata-PVName={{ .UpgradeItem.name }}
  post: |
    {{- jsonpath .JsonResult "{.items[*].spec.snapshotDataName}" | trim | saveAs "listVolumeSnapshotDetails.snapshotDataNames" .TaskResult | noop -}}

    {{- .TaskResult.listVolumeSnapshotDetails.snapshotDataNames | toString | saveAs "listVolumeSnapshotDetails.volumeSnapshotData" .TaskResult | noop -}}
    {{- if eq .TaskResult.listVolumeSnapshotDetails.volumeSnapshotData "" }}
    {{- printf "false" | saveAs "listVolumeSnapshotDetails.isExist" .TaskResult }}
    {{- else }}
    {{- printf "true" | saveAs "listVolumeSnapshotDetails.isExist" .TaskResult }}
    {{- end }}

    {{- $message := printf "details of volumesnapshotdata {%s} for volume: {%s}" .TaskResult.listVolumeSnapshotDetails.snapshotDataNames .UpgradeItem.name -}}
    {{- $status :=.Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-list-volumesnapshot" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-volumesnapshotdatadata
  namespace: default
spec:
  meta: |
    {{- $snapshotDataList := .TaskResult.listVolumeSnapshotDetails.snapshotDataNames | default "" | splitList " " -}}
    id: patchSnapData
    apiVersion: v1
    kind: VolumeSnapshotData
    action: patch
    disable: {{ eq .TaskResult.listVolumeSnapshotDetails.isExist "false" }}
    repeatWith:
      metas:
      {{- range $k, $snapData := $snapshotDataList }}
      - objectName: {{ $snapData }}
      {{- end }}
  task: |-
    type: merge
    pspec: |-
      spec:
        openebsVolume:
          capacity: {{ .TaskResult.getVolDetails.pvCapacity }}
  post: |
    {{- $message := printf "volume snapshotdatas are patched with capacity: {%s}" .TaskResult.getVolDetails.pvCapacity -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-patch-volumesnapshotdatadata" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-volumesnapshotdata
  namespace: default
spec:
  meta: |
    {{- $snapshotDataList := .TaskResult.listVolumeSnapshotDetails.snapshotDataNames | default "" | splitList " " -}}
    id: getVolumeSnapshotDataDetails
    apiVersion: v1
    kind: VolumeSnapshotData
    action: get
    disable: {{ eq .TaskResult.listVolumeSnapshotDetails.isExist "false" }}
    repeatWith:
      metas:
      {{- range $k, $snapData := $snapshotDataList }}
      - objectName: {{ $snapData }}
      {{- end }}
  post: |
    {{- jsonpath .JsonResult "{.spec.openebsVolume.capacity}" | trim | saveAs "getVolumeSnapshotDataDetails.capacity" .TaskResult | noop -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace .UpgradeItem.upgradeResultNamespace -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-volumesnapshotdata" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}

    {{- $status := "" -}}
    {{- $message := "" -}}

    {{- if eq .TaskResult.getVolumeSnapshotDataDetails.capacity .TaskResult.getVolDetails.pvCapacity }}
    {{- $status = .Config.successStatus.value -}}
    {{- $message = printf "patched volume snapshot data successfully" -}}
    {{- else }}
    {{- $status = .Config.failStatus.value -}}
    {{- $message = printf "failed to patch volume snapshot data" -}}
    {{- end }}

    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
