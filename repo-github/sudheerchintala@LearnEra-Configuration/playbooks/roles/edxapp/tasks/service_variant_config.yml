- name: "create {{ item }} application config"
  template: >
    src={{ item }}.env.json.j2
    dest={{ edxapp_app_dir }}/{{ item }}.env.json
  sudo_user: "{{ edxapp_user }}"
  tags: edxapp_cfg
  with_items: service_variants_enabled
  notify:
  - "restart edxapp"
  - "restart edxapp_workers"

- name: "create {{ item }} auth file"
  template: >
    src={{ item }}.auth.json.j2
    dest={{ edxapp_app_dir }}/{{ item }}.auth.json
  sudo_user: "{{ edxapp_user }}"
  tags: edxapp_cfg
  notify:
  - "restart edxapp"
  - "restart edxapp_workers"
  with_items: service_variants_enabled

# write the supervisor scripts for the service variants

- name: "writing {{ item }} supervisor script"
  template: >
    src={{ item }}.conf.j2 dest={{ supervisor_available_dir }}/{{ item }}.conf
    owner={{ supervisor_user }}
    group={{ supervisor_user }}
  with_items: service_variants_enabled
  sudo_user: "{{ supervisor_user }}"

- name: writing edxapp supervisor script
  template: >
    src=edxapp.conf.j2 dest={{ supervisor_available_dir }}/edxapp.conf
    owner={{ supervisor_user }}
    group={{ supervisor_user }}
  sudo_user: "{{ supervisor_user }}"

# write the supervisor script for celery workers

- name: writing celery worker supervisor script
  template: >
    src=workers.conf.j2 dest={{ supervisor_available_dir }}/workers.conf
    owner={{ supervisor_user }}
    group={{ supervisor_user }}
  sudo_user: "{{ supervisor_user }}"

# Enable the supervisor jobs
- name: "enable {{ item }} supervisor script"
  file: >
    src={{ supervisor_available_dir }}/{{ item }}.conf
    dest={{ supervisor_cfg_dir }}/{{ item }}.conf
    state=link
    force=yes
  with_items: service_variants_enabled
  when: celery_worker is not defined and not disable_edx_services
  sudo_user: "{{ supervisor_user }}"

- name: "enable edxapp supervisor script"
  file: >
    src={{ supervisor_available_dir }}/edxapp.conf
    dest={{ supervisor_cfg_dir }}/edxapp.conf
    state=link
    force=yes
  when: celery_worker is not defined and not disable_edx_services
  sudo_user: "{{ supervisor_user }}"

- name: "enable celery worker supervisor script"
  file: >
    src={{ supervisor_available_dir }}/workers.conf
    dest={{ supervisor_cfg_dir }}/workers.conf
    state=link
    force=yes
  when: celery_worker is defined and not disable_edx_services
  sudo_user: "{{ supervisor_user }}"

# Syncdb with migrate when the migrate user is overridden in extra vars
- name: syncdb and migrate
  shell: >
    chdir={{ edxapp_code_dir }}
    {{ edxapp_venv_bin}}/python manage.py {{ item }} syncdb --migrate --noinput --settings=aws_migrate
  when: fake_migrations is not defined and migrate_db is defined and migrate_db|lower == "yes" and COMMON_MYSQL_MIGRATE_PASS and item != "lms-preview"
  environment:
    DB_MIGRATION_USER: "{{ COMMON_MYSQL_MIGRATE_USER }}"
    DB_MIGRATION_PASS: "{{ COMMON_MYSQL_MIGRATE_PASS }}"
  sudo_user: "{{ edxapp_user }}"
  with_items: service_variants_enabled
  notify:
  - "restart edxapp"
  - "restart edxapp_workers"

# Gather assets using paver if possible

- name: gather {{ item }} static assets with paver
  shell: >
    SERVICE_VARIANT={{ item }} paver update_assets {{ item }} --settings=aws
    executable=/bin/bash
    chdir={{ edxapp_code_dir }}
  sudo_user: "{{ edxapp_user }}"
  when: celery_worker is not defined and not devstack and item != "lms-preview"
  with_items: service_variants_enabled
  notify:
  - "restart edxapp"
  - "restart edxapp_workers"
  environment: "{{ edxapp_environment }}"

