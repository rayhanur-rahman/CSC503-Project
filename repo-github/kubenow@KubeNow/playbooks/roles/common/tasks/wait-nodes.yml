---
- name: "wait for server to respond on ssh port"
  local_action: wait_for
    host={{ ansible_host | default(inventory_hostname) }}
    port={{ ansible_port | default(22) }}
    state=started
    connect_timeout=10
    timeout=300

- name: "wait for server to respond on ssh port - second check"
  local_action: wait_for
    host={{ ansible_host | default(inventory_hostname) }}
    port={{ ansible_port | default(22) }}
    search_regex=OpenSSH
    connect_timeout=10
    timeout=300

# if task in block fails - rescue and always output cloud-init log as debug info
- block:

  - name: "wait until for cloud-init to finish on master"
    stat:
      path: /run/cloud-init/result.json
    register: stat_result
    until: stat_result.stat.exists == True
    # Wait for 10 minutes
    retries: 120
    delay: 5

  - name: "verify that master initialized ok"
    shell: >
      cat /var/log/cloud-init-output.log | grep 'Kubernetes master has initialized successfully'
    register: grep_master_initialized
    failed_when: grep_master_initialized.rc != 0

  - name: "wait for all nodes to join the master"
    shell: >
      kubectl get nodes
      -o jsonpath='{.items[*].status.conditions[-1:].type}' |
      grep -o 'Ready' | wc -l
    register: get_ready_nodes
    until: (get_ready_nodes.stdout | int) == (nodes_count | int)
    # Wait for 10 minutes
    retries: 120
    delay: 5

  rescue:

  - name: "get cloud-init log"
    command: >
      cat /var/log/cloud-init-output.log
    register: cloud_init_log

  - name: print master cloud init log
    debug:
      msg: "{{ cloud_init_log.stdout }}"

  # now fail when log output is printed
  - name: fail play
    fail:
      msg: "Error in node init process, hopefully the master node cloud-init log above can help solving the issue"
