#!/usr/bin/ansible-playbook
---
# This playbook reinitializes docker storage.
#
# *** WARNING ***
# THIS IS A DESTRUCTIVE OPERATION!!!
# *** WARNING ***
#
#  NOTE: This playbook assumes docker was already installed and working.
#
#  To run:
#
#  1. run the playbook:
#
#     ops-docker-storage-reinitialize.yml -e cli_name=<some_host>
#
#  Example:
#
#     ops-docker-storage-reinitialize.yml -e cli_name=opstest-node-compute-s3g5s

- name: Reinitialize Docker Storage
  gather_facts: yes
  hosts: "oo_name_{{ cli_name }}"
  user: root
  connection: ssh

  vars_prompt:
  - name: cli_name
    prompt: "Name of the instance to run on (e.g. opstest-node-compute-s3g5s)"
    private: no

  - name: cli_confirm_run
    prompt: "This is a DESTRUCTIVE operation, are you sure? (no/yes)"
    default: "no"
    private: no

  roles:
  - role: lib_utils

  post_tasks:
  - fail:
      msg: "This playbook requires {{ item }} to be set and not empty."
    when: "{{ item }} is not defined or {{ item }} == ''"
    with_items:
    - cli_name

  - fail:
      msg: "User aborted"
    when: cli_confirm_run != "yes"

  - name: Install atomic tool
    package:
      name: atomic
      state: latest

  - name: Get the docker storage information from the docker-storage-setup sysconfig file
    oo_sysconfig_fact:
      name: docker_storage_setup
      src: /etc/sysconfig/docker-storage-setup

  - name: Determine docker storage driver
    set_fact:
      storage_driver: "{{ docker_storage_setup.STORAGE_DRIVER | default('overlay2', true) | replace('\"', '') }}"

  - name: Determine container root LV mount path
    set_fact:
      container_root_lv_mount_path: "{{ docker_storage_setup.CONTAINER_ROOT_LV_MOUNT_PATH | default('/var/lib/docker', true) | replace('\"', '') }}"

  - name: make sure docker is stopped and disabled (to avoid resource conflicts)
    service:
      name: docker
      state: stopped
      enabled: False

  - name: "Make {{ container_root_lv_mount_path }}/volumes mutable"
    command: "chattr -i {{ container_root_lv_mount_path }}/volumes"
    ignore_errors: True

  # This runs: docker-storage-setup --reset
  #              - Deactivate and remove the LV mounted at
  #                CONTAINER_ROOT_LV_MOUNT_PATH.
  #              - (dm-only) Deactivate and remove the thin pool LV.
  #              - Remove PV(s) on device(s) DEVS.
  #              - Remove 1st partition on device(s) DEVS.
  #            umount ${rootgraphdir}/devicemapper  }
  #            umount ${rootgraphdir}/overlay       } ignoring errors
  #            umount ${rootgraphdir}/overlay2      }
  #            rm --recursive ${rootgraphdir}
  #            mkdir --parents ${rootgraphdir}
  - name: Reset docker storage
    command: atomic storage reset

  - name: Remove docker_vg if present
    command: "vgremove -y '{{ docker_storage_setup.VG }}'"
    ignore_errors: true
    register: vgremove_output

  - name: dmsetup remove docker devices if vgremove failed
    shell: "dmsetup table | grep ^docker- | cut -d: -f1-2 | xargs -n1 dmsetup remove"
    ignore_errors: true
    register: dmsetup_output
    when:
    - storage_driver == 'devicemapper'
    - "'is used by another device' in vgremove_output.stderr"

  - name: Remove docker_vg if present
    command: "vgremove -y '{{ docker_storage_setup.VG }}'"
    ignore_errors: true
    register: vgremove_output
    when: not dmsetup_output|skipped

  - fail:
      msg: "Failed to remove the docker VG. You may need to disable the docker and atomic-openshift-node services and reboot the machine. Then re-run this playbook. Once it has been re-initialized, re-enable the atomic-openshift-node service."
    when: vgremove_output|failed

  # Sometimes DEVS is an absolute path (e.g. /dev/xvdb),
  # sometimes DEVS is just the device name (e.g. nvme1n1).
  - name: Extract the device path
    set_fact:
      device_path: "{{ docker_storage_setup.DEVS | dirname | default('/dev', true) }}/{{ docker_storage_setup.DEVS | basename }}"

  - name: Wipe the filesystem
    command: "wipefs --all '{{ device_path }}'"

  - name: Run docker-storage-setup to initialize docker storage
    command: docker-storage-setup

  - name: "Recreate {{ container_root_lv_mount_path }}/volumes"
    file:
      path: "{{ container_root_lv_mount_path }}/volumes"
      state: directory

  - name: Start and enable docker daemon
    service:
      name: docker
      state: started
      enabled: True
